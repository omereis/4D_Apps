#platform "pixxiLCD-13P2CT-CLB"

#inherit "4DGL_16bitColours.fnc"

#inherit "ESP8266_4DGL_Flash.inc"

// Contains the Wi-Fi network SSID and Password
#inherit "ESP_WiFi_Network.inc"
// Edit this file to match your Wi-Fi network
// The changes will be used for all other examples

#DATA
    byte _4dprint       0x92, 0xe3, 0x17, 0xb2, 0x5e, 0x29, 0x53, 0x7e, 0x58, 0x65,
                        0xc6, 0xc1, 0xf6, 0x20, 0x3e, 0x0b, 0xd5, 0xe6, 0xce, 0xb5
#END

var hndl;
func main()

    gfx_ScreenMode(PORTRAIT);
    media_Init();

    ESP_Initialize(ESP_4DISCOVERY13);
    WiFi_SetMode(WIFI_STATION);

    gfx_MoveTo(0, 95);
    print("Connecting to ", [STR]SSID);
    WiFi_Begin(SSID, PASSWORD);
    while(WiFi_Status() != WIFI_CONNECTED)
        pause(500);
        putch('.');
    wend
    putch('\n');
    WiFi_PrintLocalIP(0);
    putch('\n');

    var res;

    HTTP_AttachProgressHandler(handleHttpRequest);

    // HTTP_SetSecure(0); // Setting the thumbprint to 0 allows
    // HTTPS requests without checking the thumbprint (not advisable)
    HTTP_SetSecure(_4dprint);

    HTTP_SetMode(HTTP_GET);
    HTTP_SetPort(443);
    HTTP_SetHost("www.4dsystems.com.au");

    HTTP_SetOutputSector(0, 0);
    HTTP_SetPath("/media/downloads/4Discovery/sample.gcf");

    gfx_Cls();
    gfx_MoveTo(0, 95);
    res := HTTP_StartRequest(1);
    if (!res)
        print("\n\nDownloading GCF file failed\n\n");
        goto UpdateFailed;
    endif
    print("Downloaded GCF file\n");

    print("\nDone\n");

    hndl := file_LoadImageControl(0, 0, 3);
    var val, lastUpdateTime;
    lastUpdateTime := sys_T() - 500;

    repeat
        if (sys_T() - lastUpdateTime > 500)
            img_SetWord(hndl, 0, IMAGE_INDEX, val) ; // where frame is 0 to 10 (for a displayed -1 to -1)
            img_Show(hndl, 0);
            lastUpdateTime := sys_T();
            val++;
            if (val > 10) val := 0;
        endif
    forever

UpdateFailed:
    print("Result   : ", res, "\n");
    if (res == 0)
        print("Esp Error: ", ESP_GetError(), "\n");
        print("HttpError: ", HTTP_GetError(), "\n");
    endif
    repeat forever

endfunc

// Define a Handler Function
func handleHttpRequest(var percent, var * rcvd, var * total)
    var rcvdPtr, totalPtr;
        rcvdPtr  := str_Ptr(rcvd);
        totalPtr := str_Ptr(total);
    gfx_MoveTo(0, 95);
    print("Received ", percent, " percent  \n");
    str_Printf(&rcvdPtr,  "Received %lu of ");
    str_Printf(&totalPtr, "%lu bytes    \n");
endfunc

