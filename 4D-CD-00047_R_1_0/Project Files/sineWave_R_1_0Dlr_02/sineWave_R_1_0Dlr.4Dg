#platform "Gen4-uLCD-70DT"

// Program Skeleton 1.2 generated 7/23/2015 9:19:41 AM

#inherit "4DGL_16bitColours.fnc"
#inherit "ledDigitsDisplay.inc"

#inherit "VisualConst.inc"

#inherit "sineWave_R_1_0DlrConst.inc"

//#inherit "scope4.inc"

var new_y1[250], old_y1[250]; // the scope is 250 pixels wide
var temp[250];

func main()
    var i,j,k,m;

    gfx_Set(SCREEN_MODE,LANDSCAPE) ;
    gfx_Cls();

    // Rectangle1 1.0 generated 01/08/2022 11:16:44
    gfx_OutlineColour(WHITE) ;
    gfx_LinePattern(LPFINE) ;
    gfx_RectangleFilled(399, 96, 625, 244, YELLOW) ;
    gfx_OutlineColour(BLACK) ;
    gfx_LinePattern(LPSOLID) ;



    // Leddigits1 1.0 generated 01/08/2022 11:37:25
    img_Show(hndl, iLeddigits1);  // show all digits at 0, only do this once
    ledDigitsDisplay(17.0, iLeddigits1+1, 212, 4, 3, 30, 0) ;

    // Form1 1.1 generated 01/08/2022 11:37:19


    // Scope1 1.0 generated 7/23/2015 9:50:39 AM
    // Create empty initial scope
    gfx_RectangleFilled(40, 52, 289, 201, BLACK) ;
    gfx_Hline(52 + 75, 40, 289, YELLOW) ;
    Graticule(40, 52, 289, 201, 10,  10, 0x0280) ;


    // fill up the buffer
    for(i := 0; i < 250; i++)
        new_y1[i] := SIN(i);
    next
    j := 0 ;
    k := 5;
    //k := 10; // try this
    //k := 15; // try this
    repeat
        // draw and update scope
        Graticule(40, 52, 289, 201, 10,  10, 0x0280) ;
        gfx_Scope(40, 250, 126, 250, 0, 50, BLACK,
                  old_y1, new_y1, LIME, 0,0,0, 0,0,0, 0,0,0 ) ;
        gfx_Hline(52 + 75, 40, 289, YELLOW) ;

        // update the buffer
        // shift contents k units to the right, using the temporary buffer "temp"
        mem_Copy(new_y1, temp, 2*(sizeof(new_y1)-k));
        mem_Copy(temp, &new_y1[k], 2*(sizeof(new_y1)-k));

        for(i := k-1; i >= 0; i--) // fill the k left-most elements with new values
            j--;
            m := ABS(j%360);
            m := 360 - m;
            new_y1[i] := SIN(m);
        next
    forever

endfunc


func Graticule(var x1, var y1, var x2, var y2, var xinc, var yinc, var color)
    var y ;
    x1 += xinc ;
    while (x1 < x2)
        y := y1 + yinc ;
        while (y < y2)
            gfx_PutPixel(x1, y, color) ;
            y += yinc ;
        wend
        x1 += xinc ;
    wend
endfunc

