#platform "Gen4-uLCD-70DT"


// Program Skeleton 1.5 generated 27/07/2022 12:28:43

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"

// var gradientRAM[29+xxx*2] := [-1,-1,-9999,0,0,xxx] ;  // uncomment and replace xxx with maximum of all inherent 'media' widgets

#inherit "MyCommConst.inc"

#DATA
    // IGauge1 Data Start
    word IIGauge1 244, 56, 28, 159, 80, 0, 50, 0, 0, 0x18E3, 0x0280, LIME,
        0x5280, YELLOW, 0x5000, RED, 51, 36, 0x0
    // IGauge1 Data End
#END
var vIGauge1RAM[WIDGET_RAM_SPACE] ;

func main()
    var value, frame, status, dir;
//  Uncomment the following if uSD and uSD based GCI images, fonts or strings used.
/**/
//  var hstrings ; // Handle to access uSD strings, uncomment if required
//  var hFontx ;   // Handle to access uSD fonts, uncomment if required and change n to font number
    putstr("Mounting...");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif
    putstr("Mounted\n");
//    gfx_TransparentColour(0x0020);    // uncomment if transparency required, please understand why and when you need to use this
//    gfx_Transparency(ON);             // uncomment if transparency required, as generally there is a performance hit when using it

//  hFontn := file_LoadImageControl("MyComm.dan", "MyComm.gcn", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
//  hstrings := file_Open("MyComm.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
    hndl := file_LoadImageControl("MyComm.dat", "MyComm.gci", 1);
    txt_MoveCursor(5, 5);
    print("hnd1 loaded: ", hndl);
/**/

//  Uncomment the following if Flash and Flash based GCF images, fonts or strings used.
/*
//    if SPI0 (Traditional uSD SPI port) Used
//    spi_Init(SPI_FAST, SPI_IS_FLASH);  // replace SPI_IS_FLASH with 0 if PmmC < v27 and flash <= 16MB
//    if SPI1 (other SPI pins) Used
//    pin_HI(EnablePin) ;                   // EnablePin is PA pin connected to SPI_CS
//    pin_Set(PIN_OUT,EnablePin) ;          // EnablePin is PA pin connected to SPI_CS
//    SPI1_SCK_pin(FlashSCK?<) ;            // FlashSCK is PA pin connected to SPI_SCK
//    SPI1_SDI_pin(FlashSDI?<) ;            // FlashSDI is PA pin connected to SPI_SDI
//    SPI1_SDO_pin(FlashSDO?<) ;            // FlashSDO is PA pin connected to SPI_SDO
//    SPI1_Init(SPI_SPEED15, SPI8_MODE_5  + SPI_IS_FLASH, EnablePin) ; // remove SPI_IS_FLASH if PmmC < v27 and flash <= 16MB, EnablePin is USD_ENABLE or PA?
    spiflash_SetAdd(SPI0, 0, 0);
    hndl := spiflash_LoadGCFImageControl(SPIx, EnablePin);    // SPIx is SPI0 or SPI1, as appropriate, EnablePin is USD_ENABLE or PA?
*/



    // Meter1 1.0 generated 03/08/2022 9:52:44
    img_SetWord(hndl, iMeter1, IMAGE_INDEX, frame) ; // where frame is 0 to 100 (for a displayed 0 to 100)
    img_Show(hndl,iMeter1) ;

    // IGauge1 1.0 generated 03/08/2022 9:52:49
    gfx_Gauge(value, vIGauge1RAM, IIGauge1) ;    // where value is 0 to 50

    gfx_Set(SCREEN_MODE,LANDSCAPE) ;
    img_Show(hndl, ALL);

    status := img_SetWord (hndl, iMeter1, IMAGE_INDEX, 55);
    //txt_MoveCursor(5, 45);
    //print("status: ", status);
    status := img_Show(hndl, iMeter1);
    //txt_MoveCursor(15, 45);
    //print("status: ", status);
    value := 0;
    dir := 1;
    repeat
        status := img_SetWord (hndl, iMeter1, IMAGE_INDEX, value);
        status := img_Show(hndl, iMeter1);
        pause(1000);
        value := value + 5;
        if (value > 100)
            value := 0;
        endif
/*
        if (value >= 100)
            dir := -1;
        else
            if (value <= 0)
                dir := 1;
            endif
        endif
        if (dir == 1)
            value := value + 50;
        else
            value := value - 50;
        endif
*/
        txt_MoveCursor(10, 5);
        print("value: ", value);
        txt_MoveCursor(11, 5);
        print("dir: ", dir);
    forever
endfunc

