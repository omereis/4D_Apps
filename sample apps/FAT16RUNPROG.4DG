#platform "uLCD-32PTU"

/*************************************************
* Filename: FAT16runprog.4dg
* Created: 2008/11/06
* Author: 4D
* Description: The first test program for file_Run()
* and some experimentation with dynamic buttons.
*
* NB:- Copy all the files from the folder named
* "../resource/Copy to uSD" to be able to run this
* and other FAT16 examples.
*
* NB:- This program must be written to flash so
* it becomes the top down program.
*
**************************************************/

#inherit "4DGL_16bitColours.fnc"
//#inherit "FONT4.fnt"

#constant MAXBUTTONS 20     // for now, maximum number of buttons we want
                            // (also sets the maximum number of files we can exec)

#MODE RUNFLASH
#LISTCODE
#STACK 500

//--------------------------------------------------------------------------------------------
// local global variables
//--------------------------------------------------------------------------------------------
// NB:- demo assigns all arrays to MAXBUTTONS.
// The arrays could be dynamically assigned to minimize memory usage.
// There is a break even point between extra code and smallish arrays.
var keyval;                             // 0 if no key pressed else 1-n
var filenames;                          // pointer to byte array that holds the filenames

var buttontexts[MAXBUTTONS];            // pointers into the filenames array that holds the filenames we use as button text

var vButtonState[MAXBUTTONS];           // button state flags (bit 0 = up:down state)
var vOldButtonState[MAXBUTTONS];        // OLD button state flags (bit 0 = up:down state)
                                        // (we keep 2 copies so we can test for a state -
                                        // change and only redraw when a state change occurs)

var touchX1[MAXBUTTONS];                // touch regions for the buttons
var touchY1[MAXBUTTONS];
var touchX2[MAXBUTTONS];
var touchY2[MAXBUTTONS];


var btnTextColor;                       // button text colour
var btnBtnColor;                        // button background colour
var buttoncount;                        // actual number of buttons created (set by number of *.4XE files we find on drive)

var tempstr[20];                        // general purpose string, 40 bytes


//==================================================================================================
// Redraw the button matrix
// Only draw buttons that have changed state.
// The top lef corner of the button matrix is set with the xorg and yorg parameters.
// depending on the font and text string width, the button matrix dynamically resizes.
// Parameters:-
// maxwidth    = rhs from xorg (in pixels) to cause wrap at rhs
// maxwidth    = maximum matrix width (in pixel units)
// buttoncount = number of buttons to display
// font        = FONT1 to FONT4
// xorg:yorg   = top left corner of button array
// NB:- The  touch detect matrix array is updated when any button changes state.
// When you need to draw the matrix for the first instance of the matrix, you must
// call with mode = 1 to instantiate the buttons.
// call with mode = 0 for normal button action.
//==================================================================================================
func redraw(var bcount, var font, var xorg, var yorg, var maxwidth, var mode )

    var xgap, ygap, n, x1, y1, x2, y2;

    xgap := 2;
    ygap := 2;
    x1 := xorg;
    y1 := yorg;

    // if first, set all the buttons to the up state
    if (mode)
        n := 0;
        repeat
            vButtonState[n]:=UP;            // set all the buttons to inverse state
            vOldButtonState[n]:=DOWN;       // so we guarantee they are all drawn in the 'up' state (not pressed)
        until(++n >= buttoncount);
    endif


    // check all the button states, if a change occured,
    // draw the new button state and update the touch detect matrix array
    n := 0;
    repeat
        // if the button state has changed
        if ( vButtonState[n] != vOldButtonState[n])
            vOldButtonState[n] := vButtonState[n];

            // if we already have all the co-ordinates, use them
            if (!mode)
                x1 := touchX1[n];
                y1 := touchY1[n];
                x2 := touchX2[n];
                y2 := touchY2[n];
            endif

            // draw the button
            gfx_Button( vButtonState[n], x1, y1, btnBtnColor, btnTextColor, font, 1, 1, buttontexts[n] );


            // update the touch screen regions only during first build
            if (mode)
                x2 := gfx_Get(RIGHT_POS);
                y2 := gfx_Get(BOTTOM_POS);

                touchX1[n] := x1;
                touchY1[n] := y1;
                touchX2[n] := x2;
                touchY2[n] := y2;

                // calculate next button position
                x1 := x2 + xgap;
                if (x1 >= xorg + maxwidth)
                    x1 := xorg;
                    y1 := y2 + ygap;
                endif
            endif

        endif
    until (++n >= buttoncount);
endfunc


//==================================================================================================
// do something with the key data
// In this example, we reconstitute the button name to a file name
// by appending ".4XE" and then call the file_Run command to
// run an application.
// NB static strings and DATA values are part of the CODE segment of the calling program
// and cannot be passed directly as a pointer from the parent process if running from FLASH.
//==================================================================================================
func sendkey()
    var p, r;
    var passbuf[20];                        // buffer to pass a string to called process
    var params[2];                          // parameter block to be passed to program via file_Run
    params[0] := 1;                         // parameter count
    params[1] := passbuf;                   // point to the buffer that will contain the string
    to(passbuf); putstr("HELLO WORLD");     // copy a static string into the buffer

    p := buttontexts[keyval-1];
    to(tempstr); str_Printf(&p, "%s.4XE");

    txt_Set(TEXT_OPACITY, OPAQUE);
    //txt_Set(FONT_SIZE , FONT4);
    txt_Set(FONT_SIZE , FONT3);
    txt_MoveCursor(3, 0);

//txt_Set(TEXT_COLOUR, RED);
//print ("_________________");


   // if(file_Exists(tempstr))
//        touch_Set(TOUCH_DISABLE);               // disable the touch screen
        txt_Set(TEXT_COLOUR, ORANGE);
        print ("\rRUN: ", [STR] tempstr );      // run the required program
        pause(500);
        print("\nmem = ",mem_Heap());
        p := mem_Alloc(5000); // junk, it will be released
        //mem_Free(ALL);        // not needed, file_Run will release it
        print("\nmem = ",mem_Heap());
        //file_Unmount();    // not needed, file_Run will release it
       //r := file_Run(str_Ptr(tempstr),params);                    // just run the prog, with args
       file_Exec(str_Ptr(tempstr),0);                    // just run the prog, no args
       //SystemReset();      // restart the menu program after return
        gfx_Cls();
        print("BACK, mem = ",mem_Heap()," r = ",[HEX] r);
        pause(3000);

endfunc

//==================================================================================================
// convert the touch co-ordinates to a key value
// returns 0 if no key down else return index 1..n of button
//==================================================================================================
func readKeys(var x, var y)

    var n, x1, y1, x2, y2, r;

    n := 0;
    r := 0;

    while (n < buttoncount && !r)
        x1 := touchX1[n];
        y1 := touchY1[n];
        x2 := touchX2[n];
        y2 := touchY2[n];
        n++;
        if (x >= x1 && x < x2 && y >= y1 && y < y2) r := n;
    wend

    return r;
endfunc


//==================================================================================================
func main()

    var k, n, state, x, y;
    var p, s, w, f, D;

    pokeW(GFX_PIXEL_SHIFT, 0);
    w := 120;
    //f := FONT4;
    f := FONT3;
    btnTextColor := BLACK;
    btnBtnColor := LIGHTGREY;
redo:

    gfx_Cls();
    //gfx_Set(SCREEN_MODE, LANDSCAPE);
    gfx_Set(BEVEL_WIDTH, 2);

    txt_Set(FONT_SIZE, FONT3);
    print("Memory available = ",mem_Heap(),"\n");

    if(!(D := file_Mount()))
        putstr("Disk not mounted");
        while(!(D := file_Mount()));
    else
        print([HEX] D, " Disk mounted\n");
    endif

    buttoncount := file_Count("*.4xe");             // count all the executable files on the drive
    print("4XE File count = ",buttoncount,"\n");

    n := buttoncount;                               // k holds entry count
    if (!n)
        print("No 4XE executables\n");              // critical error, nothing to run!
        repeat forever
    endif


    filenames := mem_AllocZ(n*13);                  // allocate a buffer for the filenames
    if(!filenames)
        print("Out of memory\n");                   // critical error, could not allocate buffer
        repeat forever
    endif

    to(filenames); file_Dir("*.4xe");               // load the filenames array
    p := str_Ptr(filenames);                        // point to the string

    // assign the array of string pointers and truncate filename extensions
    n := 0;
    while ( n < buttoncount )
        buttontexts[n++] := p;                      // save pointer intto the string
        p:=str_Find ( &p , "." );                   // find end of required string
        str_PutByte(p++,'\0');                      // change '.' to \0
        p := p + 4;                                 // skip over "4XE\n"
    wend

    touch_Set(TOUCH_ENABLE);                               // enable the touch screen

    redraw(buttoncount, f, 10, 80, w, 1);               // draw buttons for the first time

    // now just stay in a loop
    repeat
        state := touch_Get(TOUCH_STATUS);                   // get touchscreen status
        x := touch_Get(TOUCH_GETX);
        y := touch_Get(TOUCH_GETY);

        // debugging
        //if(state == TOUCH_MOVING)           // if there's movement
        //    gfx_PutPixel(x, y, RED);        // we'll draw a RED pixel
        //endif

        if(state == TOUCH_PRESSED)                            // if there's a press
            if (keyval := readKeys(x, y))
                vButtonState[keyval-1] := DOWN;             // put button in DOWN state
                redraw(buttoncount, f, 10, 80, w, 0);        // draw any button down states
            endif
        endif

        if(state == TOUCH_RELEASED)                          // if there's a release
            if (keyval)
                vButtonState[keyval-1] := UP;               // restore the buttons UP state
                redraw(buttoncount, f, 10, 80, w, 0);        // draw any button up states
                sendkey();                                  // do something with the key data
                keyval := 0;
goto redo; //  'redo' here, must re-establish drive etc as file_Run dumps the parents allocations
//ProgramExit();      //or restart the prog with a SystemReset() to ensure total stability
//SystemReset();      // could also go to sleep heare and wait for a touch to wakeup by issueing a SystemReset()
            endif
        endif

    forever

    // mem_Free(filenames);                    // no need to release buffer, this prog is in flash and never exits.....
    // file_Unmount();                         // ditto

endfunc
//==================================================================================================



















































