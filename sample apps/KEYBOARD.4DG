#platform "uLCD-32PTU"

/*************************************************
* Filename: KEYBOARD.4dg
* Created: 2008/11/06
* Author: 4D
* Description: simple keyboard example
*
**************************************************/

#inherit "4DGL_16bitColours.fnc"
#inherit "FONT4.fnt"

//#constant MAXBUTTONS 96     // 96 characters available
#constant MAXBUTTONS 52     // 96 characters available
                            // (also sets the maximum number of files we can exec)

#STACK 200

#DATA
    byte qwerty
    "~!@#$%^&*()_+",
    "QWERTYUIOP{}|",
    "ASDFGHJKL:\"  ",
    "ZXCVBNM<>?   "
#END


//--------------------------------------------------------------------------------------------
// local global variables
//--------------------------------------------------------------------------------------------
// NB:- demo assigns all arrays to MAXBUTTONS.
// The arrays could be dynamically assigned to minimize memory usage.
// There is a break even point between extra code and smallish arrays.
var keyval;                             // 0 if no key pressed else 1-n

var buttontexts[MAXBUTTONS];            // pointers into the filenames array that holds the filenames we use as button text

var vButtonState[MAXBUTTONS];           // button state flags (bit 0 = up:down state)
var vOldButtonState[MAXBUTTONS];        // OLD button state flags (bit 0 = up:down state)
                                        // (we keep 2 copies so we can test for a state -
                                        // change and only redraw when a state change occurs)

var touchX1[MAXBUTTONS];                // touch regions for the buttons
var touchY1[MAXBUTTONS];
var touchX2[MAXBUTTONS];
var touchY2[MAXBUTTONS];


var btnTextColor;                       // button text colour
var btnBtnColor;                        // button background colour
var buttoncount;                        // actual number of buttons created (set by number of *.4XE files we find on drive)

var tempstr[20];                        // general purpose string, 40 bytes



//==================================================================================================
// Redraw the button matrix
// Only draw buttons that have changed state.
// The top lef corner of the button matrix is set with the xorg and yorg parameters.
// depending on the font and text string width, the button matrix dynamically resizes.
// Parameters:-
// maxwidth    = rhs from xorg (in pixels) to cause wrap at rhs
// maxwidth    = maximum matrix width (in pixel units)
// buttoncount = number of buttons to display
// font        = FONT1 to FONT4
// xorg:yorg   = top left corner of button array
// NB:- The  touch detect matrix array is updated when any button changes state.
// When you need to draw the matrix for the first instance of the matrix, you must
// call with mode = 1 to instantiate the buttons.
// call with mode = 0 for normal button action.
//==================================================================================================
func redraw(var bcount, var font, var xorg, var yorg, var maxwidth, var mode )

    var xgap, ygap, n, x1, y1, x2, y2;

    xgap := 1;
    ygap := 1;
    x1 := xorg;
    y1 := yorg;

    // if first, set all the buttons to the up state
    if (mode)
        n := 0;
        repeat
            vButtonState[n]:=UP;            // set all the buttons to inverse state
            vOldButtonState[n]:=DOWN;       // so we guarantee they are all drawn in the 'up' state (not pressed)
        until(++n >= buttoncount);
    endif


    // check all the button states, if a change occured,
    // draw the new button state and update the touch detect matrix array
    n := 0;
    repeat
        // if the button state has changed
        if ( vButtonState[n] != vOldButtonState[n])
            vOldButtonState[n] := vButtonState[n];

            // if we already have all the co-ordinates, use them
            if (!mode)
                x1 := touchX1[n];
                y1 := touchY1[n];
                x2 := touchX2[n];
                y2 := touchY2[n];
            endif

            // draw the button
            gfx_Button( vButtonState[n], x1, y1, btnBtnColor, btnTextColor, font, 1, 1, str_Ptr(&buttontexts[n]) );


            // update the touch screen regions only during first build
            if (mode)
                x2 := gfx_Get(RIGHT_POS);
                y2 := gfx_Get(BOTTOM_POS);

                touchX1[n] := x1;
                touchY1[n] := y1;
                touchX2[n] := x2;
                touchY2[n] := y2;

                // calculate next button position
                x1 := x2 + xgap;
                if (x1 >= xorg + maxwidth)
                    x1 := xorg;
                    y1 := y2 + ygap;
                endif
            endif

        endif
    until (++n >= buttoncount);
endfunc


//==================================================================================================
// do something with the key data
// In this example, we reconstitute the button name to a file name
// by appending ".4XE" and then call the file_Run command to
// run an application.
//==================================================================================================
func sendkey()
    var q;

    txt_Set(TEXT_OPACITY, OPAQUE);
    txt_Set(FONT_SIZE , FONT4);
    txt_MoveCursor(2, 0);
    print ("                 ");
    q := buttontexts[keyval-1];
    print([CHR] q);
    return q;

endfunc

//==================================================================================================
// convert the touch co-ordinates to a key value
// returns 0 if no key down else return index 1..n of button
//==================================================================================================
func readKeys(var x, var y)

    var n, x1, y1, x2, y2, r;

    n := 0;
    r := 0;

    while (n < buttoncount && !r)
        x1 := touchX1[n];
        y1 := touchY1[n];
        x2 := touchX2[n];
        y2 := touchY2[n];
        n++;
        if (x >= x1 && x < x2 && y >= y1 && y < y2) r := n;
    wend

    return r;
endfunc


//==================================================================================================
//func main(var string)
func main()

    var k, n, state, x, y;
    var p, s, w, f;

    w := 280;
    f := FONT4;
    btnTextColor := BLACK;
    btnBtnColor := LIGHTGREY;
    buttoncount := MAXBUTTONS;             // button on keypad

    gfx_Cls();
    gfx_Set(SCREEN_MODE, LANDSCAPE);
    gfx_Set(BEVEL_WIDTH, 1);

    txt_Set(FONT_SIZE, FONT3);
    print("Memory available = ",mem_Heap(),"\n");
    print("Press 'Q' to exit");

    //print(string);



    // assign the array of string pointers and truncate filename extensions
    // mode 0, just create a linear array of keys
    n := 0;
    while ( n < buttoncount )
        //buttontexts[n++] := n+31;                      // save pointer to the string
        buttontexts[n++] := qwerty[n-1];                      // save pointer to the string
    wend



    touch_Set(TOUCH_ENABLE);                               // enable the touch screen

    redraw(buttoncount, f, 10, 50, w, 1);               // draw buttons for the first time

    // now just stay in a loop
    repeat
        pause(50);
        state := touch_Get(TOUCH_STATUS);                   // get touchscreen status
        x := touch_Get(TOUCH_GETX);
        y := touch_Get(TOUCH_GETY);

        // debugging
        if(state == TOUCH_MOVING)               // if there's movement
            //gfx_PutPixel(x, y, RED);          // we'll draw a RED pixel (debug - check alignment)
        endif

        if(state == TOUCH_PRESSED)                            // if there's a press
            if (keyval := readKeys(x, y))
                vButtonState[keyval-1] := DOWN;             // put button in DOWN state
                redraw(buttoncount, f, 5, 50, w, 0);        // draw any button down states
            endif
        endif

        if(state == TOUCH_RELEASED)                          // if there's a release
            if (keyval)
                vButtonState[keyval-1] := UP;               // restore the buttons UP state
                redraw(buttoncount, f, 5, 50, w, 0);        // draw any button up states
                //sendkey();                                  // do something with the key data
                if(sendkey() == 'Q') break;
                keyval := 0;
            endif
        endif

    forever

    gfx_Set(SCREEN_MODE, PORTRAIT); // restore screen mode

endfunc
//==================================================================================================









































