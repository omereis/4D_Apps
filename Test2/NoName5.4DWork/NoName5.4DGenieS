#platform "Gen4-uLCD-70DT"

//#constant OLDCOMPILE


// generated 31/07/2022 16:55:46
// uSDRequired:- 0   InternalRequired:- InternalRequired

#MODE FLASHBANK_0

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"


#inherit "NoName5Const.inc"



#constant IPDatasize 22

#CONST
    CMDLenMAX   80
    seroutX     $serout
    serinX      $serin
#END



#CONST
    ColorBGimage     0x0020
    ACK         0x06
    NAK         0x15
    ReadCmd     0x80
    WriteCmd    0x00
//  IPD_TYPE    0 // offsets are doubled as FLASH is byte addressable
    Ofs_IPD_P1      2
    Ofs_IPD_P2      4
    Ofs_IPD_P3      6
    Ofs_IPD_P4      8
    Ofs_IPD_P5      10
    Ofs_IPD_P6      12
    Ofs_IPD_P7      14
    Ofs_IPD_DOWN    16
    Ofs_IPD_RELEASE 18
    Ofs_IPD_OBJVIDX 20
// object indexes
    tDipSwitch      0
    tKnob           1
    tRockerSwitch   2
    tRotarySwitch   3
    tGSlider        4
    tTrackbar       5
    tWinButton      6
    tAngularmeter   7   // need to implement use of this, inputs must be ordered first
    tCoolgauge      8
    tCustomdigits   9
    tForm           10
    tGauge          11
    tImage          12
    tKeyboard       13  // this is a special input, does not need to be at front
    tLed            14
    tLeddigits      15
    tMeter          16
    tStrings        17  // also need output strings code
//    tStringUNI      0x3f | 0x40
//    tStringANSII    0x3f
    tThermometer    18
    tUserled        19
    tVideo          20
    tStaticText     21
// Remove, check for non visual objects instead
//    MaxVisObjects   21  // objects that have a visual component 
    tSounds         22
    tTimer          23
    tSpectrum       24
    tScope          25
    tTank           26
    tUserImages     27
    tPinOutput      28
    tPinInput       29 
    t4Dbutton       30    // more inputs 
    tAniButton      31
    tColorPicker    32 
    tUserButton     33     
    tMagicObject    34     
    MaxTotObjects   33 // objects in objects array
//    OT_DISPLAY      22
    OT_REPORT       100
    OT_SETCONST     101
    OT_SETANOTHER   102
    OT_ACTIVATE     103
    OT_NEXTFRAME    104
    OT_PREVFRAME    105
    OT_NEXTSTRING   106
    OT_PREVSTRING   107
    OT_MAGIC        108
// other OT_s Form activate,
// Indexes into LedDigits and CustomDigits arrays
    Ofs_Digits_Left           0
    Ofs_Digits_Digits         2
    Ofs_Digits_MinDigits      4
    Ofs_Digits_Widthdigit     6
    Ofs_Digits_LeadingBlanks  8
// indexes to Strings arrays
    Ofs_String_StartH        0
    Ofs_String_StartL        2
    Ofs_String_Size          4
    Ofs_String_x1            6
    Ofs_String_y1            8
    Ofs_String_x2            10
    Ofs_String_y2            12
    Ofs_String_FGColor       14
    Ofs_String_BGColor       16
    Ofs_String_FontAttribs   18
    Ofs_String_Transparent   20 // bit transparent should 'refresh' background, otherwise rectangle out
    Ofs_String_Ansi          22 // bit defines write/draw routine
    Ofs_String_Form          24 // form this string can be seen in
    Ofs_String_GciFSFontIdx  26 // only used/exists for GciFS 
// Command codes
    READ_OBJ        0
    WRITE_OBJ       1
    WRITE_STR       2
    WRITE_STRU      3
    WRITE_CONTRAST  4
    REPORT_OBJ      5
    REPORT_EVENT    7
    WRITE_MAGIC_BYTES 8
    WRITE_MAGIC_DBYTES  9
    REPORT_MAGIC_EVENT_BYTES 10
    REPORT_MAGIC_EVENT_DBYTES 11
    WRITE_LABEL     12

// End P1.inc
    nObjects        0
    nInputs         0
    nAniTimers      0
#END

#DATA
    word FormStartIndex 0
    word FormEndIndex 0
    word InputData 0
    word oDipSwitchs 0
    word oForms 1, -1
    word FormBGcolors 0x0000
    word kKeyboardKeystrokes -1
    word rKeyboardRoutines -1
#END

// Start P2.inc
var oObjects[MaxTotObjects+1] ;                 // address of objects
var CurrentForm, oldn, ImageTouched ;
var TouchXpos, TouchYpos ;
var GObjectType, TouchState, CurInputData, pInputIndex ;
var comRX[40], cmd[CMDLenMAX] ;

var InputCS, OutputCS ;

// > ? Constant/Global/Data ? <



func seroutCS(var op)
    serout(op) ;
    OutputCS ^= op ;
endfunc

func nak0()
    serout(NAK) ;
    InputCS := 0 ;
endfunc

func seroutOcs()
    serout(OutputCS) ;
    OutputCS := 0 ;
endfunc

func SendReport(var id, var objt, var objn, var val)
    seroutCS(id) ;
    seroutCS(objt) ;
    seroutCS(objn) ;
    seroutCS(val >> 8) ; // first 8 bits
    seroutCS(val) ;
    seroutOcs() ;
endfunc



func ReadObject(var ObjectType, var ObjectIdx)
    var j, k, Objects ;
    Objects := *(oObjects+ObjectType) ;

    j := 2 + ObjectIdx * 2 + Objects ;
     if (ObjectType == tForm)
        k := CurrentForm ;
    endif
    SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
endfunc



func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
    var i, j, k, Objects ;
//    ObjectType &= 0x3f ; Why was his there? Anibuttons? Complex cascades?
//to(COM0) ; print("WriteObject ", ObjectType, " ", ObjectIdx, " ", NewVal, "\r\n") ;
    if (ObjectType == tForm)
        ActivateForm(ObjectIdx) ;
        return ;
    endif
        Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
        i := *(Objects) ;
    return ; // compiler bug circumvention!
endfunc





func ActivateForm(var newform)
    var i, j, *p ;

    CurrentForm := newform ;
    // display newform image or clear to image color
    if (FormBGcolors[CurrentForm] != ColorBGimage)
        gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
        gfx_Cls() ;
        DoGFXObjects() ;                                    // display GFX 'widgets'
    endif




endfunc

func UpdateObjects(var newval)
    var IPidx, otherOBJ, oldvalue ;
    oldvalue := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ;
    if ( ( oldvalue != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
        WriteObject(GObjectType, GObjectIdx, newval) ;
        IPidx := *(CurInputData+TouchState) ;
        while(IPidx != 0)
            otherOBJ := IPidx + InputData;
            if (*(otherOBJ) == OT_REPORT)
        SendReport(REPORT_EVENT, GObjectType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
            else if (*(otherOBJ) == OT_MAGIC)
                IPidx := *(otherOBJ+Ofs_IPD_P5) ;
                IPidx(newval) ;
//            else if (TouchState == *(otherOBJ+Ofs_IPD_P4))  // test prior to Workshop 6.5.0.0
            else if ((TouchState == *(otherOBJ+Ofs_IPD_P4)) || (*(CurInputData+Ofs_IPD_P1) && ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))))
                if (*(otherOBJ) == OT_ACTIVATE)
                    ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
                    GObjectType := tForm ;
                else if (*(otherOBJ) == OT_SETCONST)
                    newval := *(otherOBJ+Ofs_IPD_P3) ;
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_SETANOTHER)
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                endif
            endif
            IPidx := *(otherOBJ+TouchState) ;
        wend
    endif
endfunc

// End P2.inc
func DoGFXObjects()
    switch (CurrentForm)
        case 0:
            gfx_TriangleFilled(324, 67, 208, 269,  447, 269, 0x569E) ;
        break ;
    endswitch
endfunc

// Start P3.inc
func main()
    var comTX[50], cmdi, i, j, TouchStatus ;


    gfx_ScreenMode(LANDSCAPE) ;


//    gfx_MoveTo(0, 0);
//    print(mem_Heap()," ") ;
//    gfx_TransparentColour(0x0020);
//    gfx_Transparency(ON);




    // init 'constants'
// End P3.inc

    oObjects[tDipSwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tKnob] := oDipSwitchs ; // dummy as no object there
    oObjects[tRockerSwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tRotarySwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tGSlider] := oDipSwitchs ; // dummy as no object there
    oObjects[tTrackbar] := oDipSwitchs ; // dummy as no object there
    oObjects[tWinButton] := oDipSwitchs ; // dummy as no object there
    oObjects[tAngularmeter] := oDipSwitchs ; // dummy as no object there
    oObjects[tCoolgauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tCustomdigits] := oDipSwitchs ; // dummy as no object there
    oObjects[tForm] := oForms ;
    oObjects[tGauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tImage] := oDipSwitchs ; // dummy as no object there
    oObjects[tKeyboard] := oDipSwitchs ; // dummy as no object there
    oObjects[tLed] := oDipSwitchs ; // dummy as no object there
    oObjects[tLeddigits] := oDipSwitchs ; // dummy as no object there
    oObjects[tMeter] := oDipSwitchs ; // dummy as no object there
    oObjects[tStrings] := oDipSwitchs ; // dummy as no object there
    oObjects[tThermometer] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserled] := oDipSwitchs ; // dummy as no object there
    oObjects[tVideo] := oDipSwitchs ; // dummy as no object there
    oObjects[tStaticText] := oDipSwitchs ; // dummy as no object there
    oObjects[tSounds] := oDipSwitchs ; // dummy as no object there
    oObjects[tTimer] := oDipSwitchs ; // dummy as no object there
    oObjects[tSpectrum] := oDipSwitchs ; // dummy as no object there
    oObjects[tTank] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserImages] := oDipSwitchs ; // dummy as no object there
    oObjects[tPinOutput] := oDipSwitchs ; // dummy as no object there
    oObjects[tPinInput] := oDipSwitchs ; // dummy as no object there
    oObjects[t4Dbutton] := oDipSwitchs ; // dummy as no object there
    oObjects[tAniButton] := oDipSwitchs ; // dummy as no object there
    oObjects[tColorPicker] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserButton] := oDipSwitchs ; // dummy as no object there
// Start P4.inc

    // init comms
    com_Init(comRX,CMDLenMAX,0);
    com_SetBaud(COM0,960);
    com_TXbuffer(comTX, 100, 0);
    // tag 'real' objects
    for (i := 0; i <= MaxTotObjects; i++)
        if (   (i != tSounds)
            && (i != tTimer)
            && (i != tPinOutput)
            && (i != tPinInput) )
            TouchXpos := oObjects[i] ;
            TouchYpos := *(TouchXpos) ;
            for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
                oldn := *(TouchXpos+ImageTouched*2) ;
            next
        endif
    next


    // display initial form
    CurrentForm := -1 ;
// End P4.inc
// Start P5.inc
    ActivateForm(0) ; // need to change this according to first actual form

// End P5.inc
// Start P6.inc Diablo
    touch_Set(TOUCH_ENABLE);                            // enable the touch screen
    oldn := -1 ;
    repeat

        // check comms for command, how to NAK invalid command
        if (com_Count() != 0)
            i := serin() ;
            InputCS ^= i ;               // update checksum
                cmd[cmdi++] := i ;
                 if (   (cmd[0] == READ_OBJ)
                         && (cmdi == 4)         )
                    if (InputCS)
                        nak0() ;
                    else
                        ReadObject(cmd[1], cmd[2]) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
                         && (cmdi == 6)          )
                    if (InputCS)
                        nak0() ;
                    else
                        WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_CONTRAST)
                         && (cmdi == 3)         )
                    if (InputCS)
                        nak0() ;
                    else
                        gfx_Contrast(cmd[1]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
                    nak0() ;
                    cmdi := 0 ;
                endif
        endif   // a character is available


    // touch code processing

        TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
        if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
            if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
                TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
            endif
            if (TouchStatus != TOUCH_RELEASED)        // if not released
                if (oldn != -1)
                    ImageTouched := oldn ;
                else
                    if (oldn != ImageTouched)
                oldn := ImageTouched ;
                        TouchStatus := TOUCH_PRESSED ;
                    endif
                endif
                TouchXpos  := touch_Get(TOUCH_GETX);
                TouchYpos  := touch_Get(TOUCH_GETY);
                TouchState := Ofs_IPD_DOWN ;
            else
                ImageTouched := oldn ;                     // simulate release of what we touched
                oldn := -1 ;                    // prevent double release
                TouchState := Ofs_IPD_RELEASE ;
            endif
        endif
 //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it

        sys_EventsResume() ;
    forever

ciSwitch:
cDipswitch:

cKnob:
ciDial:

cRockerswitch:

cRotaryswitch:

cSlider:
cTrackbar:
ciSlider:

ciButton:

c4DButton:
cUserButton:
cWinbutton:

cAniButton:

cColorPicker:

endfunc
// End P6.inc
